// Generated by dts-bundle v0.7.3-fork.1
// Dependencies for this module:
//   ../../../../../@fullcalendar/core
//   ../../../../../@fullcalendar/daygrid
//   ../../../../../@fullcalendar/resource-common

declare module '@fullcalendar/resource-daygrid' {
    import ResourceDayGridView from '@fullcalendar/resource-daygrid/ResourceDayGridView';
    export { ResourceDayGridView };
    export { default as ResourceDayGrid } from '@fullcalendar/resource-daygrid/ResourceDayGrid';
    const _default: import("@fullcalendar/core").PluginDef;
    export default _default;
}

declare module '@fullcalendar/resource-daygrid/ResourceDayGridView' {
    import { ComponentContext } from '@fullcalendar/core';
    import { AbstractDayGridView } from '@fullcalendar/daygrid';
    import { ResourceDayHeader, ResourceViewProps } from '@fullcalendar/resource-common';
    import ResourceDayGrid from '@fullcalendar/resource-daygrid/ResourceDayGrid';
    export { ResourceDayGridView as default, ResourceDayGridView };
    class ResourceDayGridView extends AbstractDayGridView {
        static needsResourceData: boolean;
        props: ResourceViewProps;
        header: ResourceDayHeader;
        resourceDayGrid: ResourceDayGrid;
        _processOptions(options: any): void;
        render(props: ResourceViewProps, context: ComponentContext): void;
        _renderSkeleton(context: ComponentContext): void;
        _unrenderSkeleton(): void;
    }
}

declare module '@fullcalendar/resource-daygrid/ResourceDayGrid' {
    import { Hit, DateSpan, DateComponent, DateProfile, EventStore, EventUiHash, EventInteractionState, ComponentContext, Duration } from '@fullcalendar/core';
    import { DayGrid } from '@fullcalendar/daygrid';
    import { AbstractResourceDayTable } from '@fullcalendar/resource-common';
    export interface ResourceDayGridProps {
        dateProfile: DateProfile | null;
        resourceDayTable: AbstractResourceDayTable;
        businessHours: EventStore;
        eventStore: EventStore;
        eventUiBases: EventUiHash;
        dateSelection: DateSpan | null;
        eventSelection: string;
        eventDrag: EventInteractionState | null;
        eventResize: EventInteractionState | null;
        isRigid: boolean;
        nextDayThreshold: Duration;
    }
    export { ResourceDayGrid as default, ResourceDayGrid };
    class ResourceDayGrid extends DateComponent<ResourceDayGridProps> {
        dayGrid: DayGrid;
        constructor(dayGrid: DayGrid);
        firstContext(context: ComponentContext): void;
        destroy(): void;
        render(props: ResourceDayGridProps, context: ComponentContext): void;
        buildPositionCaches(): void;
        queryHit(positionLeft: number, positionTop: number): Hit;
    }
}

